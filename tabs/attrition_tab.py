# -*- coding: utf-8 -*-
"""attrition_tab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XHS9dhBztdUBsqJySDmilmOUVVgAT0eR
"""

# -*- coding: utf-8 -*-
"""attrition_tab"""

# tabs/attrition_tab.py
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from modules import modules_attrition_final as af

sns.set_theme(style="whitegrid")


@st.cache_data(show_spinner=False)
def _load_default():
    return af.load_dataset()


def _attrition_rate(df: pd.DataFrame, by: str):
    tmp = df.copy()
    tmp["Attrition_numerical"] = tmp["Attrition"].map({"Yes": 1, "No": 0})
    g = tmp.groupby(by)["Attrition_numerical"].agg(["mean", "count"]).reset_index()
    g.rename(columns={"mean": "attrition_rate"}, inplace=True)
    return g.sort_values("attrition_rate", ascending=False)


def _bar_rate(df, x, title, fmt_pct=True, rotate=False, palette="Set2"):
    fig, ax = plt.subplots(figsize=(8, 4))
    sns.barplot(data=df, x=x, y="attrition_rate", palette=palette, ax=ax)
    ax.set_title(title)
    ax.set_ylabel("Attrition rate")
    if fmt_pct:
        ax.set_ylim(0, 1)
        ax.yaxis.set_major_formatter(lambda v, pos: f"{v*100:.0f}%")
    if rotate:
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")
    st.pyplot(fig)
    plt.close(fig)


def show_attrition_analysis():
    st.header("Attrition Dashboard")

    # --- Sidebar: data + filters ---
    with st.sidebar:
        up = st.file_uploader("Upload IBM Attrition CSV", type=["csv"])
        st.markdown("---")
        st.subheader("Filters")

    df = pd.read_csv(up, sep=None, engine="python") if up else _load_default()

    # Build filter widgets dynamically if columns exist
    filt_cols = {}
    if "Department" in df.columns:
        opts = ["All"] + sorted(df["Department"].dropna().unique().tolist())
        val = st.sidebar.selectbox("Department", opts, index=0)
        if val != "All":
            filt_cols["Department"] = val

    if "JobRole" in df.columns:
        roles = ["All"] + sorted(df["JobRole"].dropna().unique().tolist())
        val = st.sidebar.selectbox("Job Role", roles, index=0)
        if val != "All":
            filt_cols["JobRole"] = val

    if "Age" in df.columns:
        a_min, a_max = int(df["Age"].min()), int(df["Age"].max())
        age_rng = st.sidebar.slider("Age range", a_min, a_max, (a_min, a_max))
    else:
        age_rng = None

    # Apply filters
    df_f = df.copy()
    for k, v in filt_cols.items():
        df_f = df_f[df_f[k] == v]
    if age_rng:
        df_f = df_f[(df_f["Age"] >= age_rng[0]) & (df_f["Age"] <= age_rng[1])]

    # --- Snapshot ---
    c1, c2 = st.columns([2, 1])
    with c1:
        st.subheader("Dataset snapshot")
        st.write(df_f.shape)
        st.dataframe(df_f.head())
    with c2:
        if "Attrition" in df_f.columns:
            rate = (df_f["Attrition"].eq("Yes").mean()) if len(df_f) else 0.0
            st.metric("Overall attrition rate", f"{rate*100:.1f}%")

    st.divider()

    # --- EDA: attrition rate by groups ---
    st.markdown("## Attrition patterns")
    if "Department" in df_f.columns:
        _bar_rate(_attrition_rate(df_f, "Department"), "Department", "Attrition by Department", rotate=True)
    if "JobRole" in df_f.columns:
        _bar_rate(_attrition_rate(df_f, "JobRole"), "JobRole", "Attrition by Job Role", rotate=True, palette="Paired")

    st.divider()

    # --- Modeling & explanation ---
    st.markdown("## Predict & explain")

    model, cv_report, best_name, test_report, imp_df, cm_df, X_test, y_test, proba, pred, test_index = \
        af.fit_best_and_explain(df_f)

    # Holdout metrics
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("ROC-AUC", f"{test_report['roc_auc']:.3f}")
    c2.metric("PR-AUC", f"{test_report['pr_auc']:.3f}")
    c3.metric("F1", f"{test_report['f1']:.3f}")
    c4.metric("Balanced Acc", f"{test_report['bal_acc']:.3f}")

    st.write("Confusion matrix")
    st.dataframe(cm_df)

    # Feature importance (permutation on original columns)
    st.subheader("Feature importance (Permutation)")
    fig, ax = plt.subplots(figsize=(8, 6))
    top_imp = imp_df.head(20).sort_values("importance", ascending=False)
    sns.barplot(data=top_imp, x="importance", y="feature", ax=ax, palette="Set2")
    ax.set_title("Top features driving Attrition")
    st.pyplot(fig)
    plt.close(fig)

    # Risk table (test set only)
    results = pd.DataFrame({
        "RowID": test_index,
        "Attrition_true": y_test.values,
        "Attrition_pred": pred,
        "Attrition_proba": proba,
    }).sort_values("Attrition_proba", ascending=False)
    st.subheader("Employees with highest predicted attrition risk")
    topn = st.slider("Show top N", 5, 50, 20, 1)
    st.dataframe(results.head(topn))

    st.download_button(
        "⬇️ Download predictions (CSV)",
        data=results.to_csv(index=False).encode("utf-8"),
        file_name="attrition_risk_predictions.csv",
        mime="text/csv",
    )









