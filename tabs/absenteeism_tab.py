# -*- coding: utf-8 -*-
"""absenteeism_tab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wRT7cenVAglFGSSTOd2uPkvXVj1SVIx5
"""

# tabs/absenteeism_tab.py
from __future__ import annotations
import io
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st

from modules import modules_absenteeism_final as absf

sns.set_theme(style="whitegrid")
DUR_ORDER = ["Less than 1 day", "1 day", "1–3 days", "More than 3 days"]


@st.cache_data(show_spinner=False)
def _load_default():
    return absf.load_dataset()


def _ensure_request_duration(df: pd.DataFrame) -> pd.DataFrame:
    if "Request_duration" in df.columns:  # already there
        return df
    if "Absenteeism time in hours" not in df.columns:
        return df
    def _dur(h):
        if h < 8: return "Less than 1 day"
        if h == 8: return "1 day"
        if h <= 24: return "1–3 days"
        return "More than 3 days"
    out = df.copy()
    out["Request_duration"] = out["Absenteeism time in hours"].apply(_dur)
    return out


def _id_to_letters(n: int) -> str:
    if pd.isna(n): return "?"
    n = int(n)
    s = ""
    while n > 0:
        n, r = divmod(n - 1, 26)
        s = chr(65 + r) + s
    return s


def _plot_heatmap(pivot: pd.DataFrame, title: str, cmap="Blues", figsize=(10, 6)):
    fig, ax = plt.subplots(figsize=figsize)
    sns.heatmap(pivot, cmap=cmap, ax=ax)
    ax.set_title(title)
    st.pyplot(fig)
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=200, bbox_inches="tight")
    st.download_button("⬇️ Download PNG", buf.getvalue(),
                       file_name=title.lower().replace(" ", "_") + ".png",
                       mime="image/png", use_container_width=True)
    plt.close(fig)


def _plot_bar(df, x, y, title, rotate=False, palette="Set2", figsize=(10, 4)):
    fig, ax = plt.subplots(figsize=figsize)
    sns.barplot(data=df, x=x, y=y, ax=ax, palette=palette)
    ax.set_title(title)
    if rotate:
        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")
    st.pyplot(fig)
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=200, bbox_inches="tight")
    st.download_button("⬇️ Download PNG", buf.getvalue(),
                       file_name=title.lower().replace(" ", "_") + ".png",
                       mime="image/png", use_container_width=True)
    plt.close(fig)


def _plot_hist(series, title, palette="deep", figsize=(10, 4)):
    fig, ax = plt.subplots(figsize=figsize)
    sns.histplot(series, kde=True, ax=ax, color=sns.color_palette(palette)[0], edgecolor="white", alpha=0.85)
    ax.set_title(title)
    st.pyplot(fig)
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=200, bbox_inches="tight")
    st.download_button("⬇️ Download PNG", buf.getvalue(),
                       file_name=title.lower().replace(" ", "_") + ".png",
                       mime="image/png", use_container_width=True)
    plt.close(fig)


def show_absenteeism_analysis():
    st.header("Absenteeism Dashboard")

    # --- Sidebar controls ---
    with st.sidebar:
        st.subheader("Filters")
        up = st.file_uploader("Upload Absenteeism CSV", type=["csv"])
        seasons = st.multiselect("Season (Quarter) filter",
                                 ["Winter", "Spring", "Summer", "Autumn"],
                                 default=["Winter", "Spring", "Summer", "Autumn"])

        st.markdown("---")
        st.subheader("Visualization")
        top_emp = st.slider("Rows in Employee heatmap (top by #events)", 10, 50, 30, 5)

        st.markdown("---")
        st.subheader("Model settings")
        q = st.slider("High threshold quantile", 0.50, 0.95, 0.80, 0.01)
        abs_thr = st.number_input("Or absolute hours (overrides quantile if > 0)",
                                  0.0, 1000.0, 0.0, 1.0)
        topn = st.slider("Top employees by risk", 5, 50, 20, 1)

    # --- Load & label ---
    df = pd.read_csv(up, sep=None, engine="python") if up else _load_default()
    df_named = absf.label_event_level(df)
    df_f = absf.filter_by_seasons(df_named, seasons)
    df_f = _ensure_request_duration(df_f)

    st.subheader("Dataset snapshot")
    st.write(df_f.shape)
    st.dataframe(df_f.head())

    # ===== Absence-level (events) =====
    st.markdown("## Absence-level")


    if {"ReasonLabel","Request_duration"}.issubset(df_f.columns):
        counts = (
            df_f.groupby(["ReasonLabel", "Request_duration"], as_index=False)["Absenteeism time in hours"]
                .size()
                .rename(columns={"size": "count"})
        )
        pv = counts.pivot(index="ReasonLabel", columns="Request_duration", values="count").fillna(0)
        pv = pv.reindex(columns=[c for c in DUR_ORDER if c in pv.columns])
        pv = pv.loc[pv.sum(axis=1).sort_values(ascending=False).index]
        _plot_heatmap(pv, "Absence Reasons by Request Duration", cmap="Blues", figsize=(12, 7))

        st.download_button("⬇️ Download reasons×duration (CSV)",
                           data=pv.reset_index().to_csv(index=False).encode("utf-8"),
                           file_name="reasons_by_request_duration.csv", mime="text/csv",
                           use_container_width=True)

    st.divider()

    # ===== Employee-level =====
    st.markdown("## Employee-level")

    # Employee × duration heatmap (top N by #events)
    df_emp = df_f.copy()
    if "ID" not in df_emp.columns:
        df_emp.insert(0, "ID", range(1, len(df_emp) + 1))
    df_emp["EmpLabel"] = df_emp["ID"].apply(_id_to_letters)

    emp_counts = (
        df_emp.groupby(["EmpLabel", "Request_duration"], as_index=False)["Absenteeism time in hours"]
              .size()
              .rename(columns={"size": "count"})
    )
    totals = emp_counts.groupby("EmpLabel")["count"].sum().sort_values(ascending=False)
    keep_labels = totals.head(top_emp).index.tolist()
    emp_counts = emp_counts[emp_counts["EmpLabel"].isin(keep_labels)]

    emp_pv = emp_counts.pivot(index="EmpLabel", columns="Request_duration", values="count").fillna(0)
    emp_pv = emp_pv.reindex(columns=[c for c in DUR_ORDER if c in emp_pv.columns])
    emp_pv = emp_pv.loc[keep_labels]
    _plot_heatmap(emp_pv, "Absence Counts by Employee (letters) and Request Duration", cmap="Blues", figsize=(8, 10))

    st.download_button("⬇️ Download employee×duration (CSV)",
                       data=emp_pv.reset_index().to_csv(index=False).encode("utf-8"),
                       file_name="employee_by_request_duration.csv", mime="text/csv",
                       use_container_width=True)

    st.divider()

    # ===== Modeling (feature importance) =====
    st.markdown("## Predict high absenteeism (feature importance)")
    agg_df = absf.aggregate_employee_level(df_f)

    candidate_features = [c for c in agg_df.columns if c not in ["ID", "total_hours"]]
    chosen = st.multiselect("Select features to include (optional)", options=sorted(candidate_features), default=[])
    features_include = chosen if chosen else None

    metrics, cm_df, imp_df, thr, model, X_test, y_test, y_proba, y_pred, test_ids = absf.train_and_eval(
        agg_df, quantile=q, abs_threshold=(abs_thr if abs_thr > 0 else None), features_include=features_include
    )

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Accuracy", f"{metrics['accuracy']:.3f}")
    c2.metric("F1", f"{metrics['f1']:.3f}")
    c3.metric("ROC-AUC", f"{metrics['roc_auc']:.3f}")
    c4.metric("PR-AUC", f"{metrics['pr_auc']:.3f}")

    st.write("Confusion matrix"); st.dataframe(cm_df)

    st.subheader("Feature importance (Permutation)")
    fig, ax = plt.subplots(figsize=(8, 6))
    imp_top = imp_df.head(20).sort_values("importance")
    sns.barplot(data=imp_top, x="importance", y="feature", ax=ax, palette="Set3")
    ax.set_title("Top features driving High absenteeism")
    st.pyplot(fig)
    buf = io.BytesIO()
    fig.savefig(buf, format="png", dpi=200, bbox_inches="tight")
    st.download_button("⬇️ Download importance (PNG)", buf.getvalue(),
                       file_name="feature_importance.png", mime="image/png",
                       use_container_width=True)
    plt.close(fig)

    results = pd.DataFrame({
        "ID":   test_ids,
        "true": y_test.values,
        "pred": y_pred,
        "proba_high": y_proba
    }).sort_values("proba_high", ascending=False)
    st.subheader("Employees with highest predicted risk")
    st.dataframe(results.head(topn))

    st.download_button("⬇️ Download employee aggregation (CSV)",
                       data=agg_df.to_csv(index=False).encode("utf-8"),
                       file_name="employee_aggregation.csv", mime="text/csv",
                       use_container_width=True)
    st.download_button("⬇️ Download predictions (CSV)",
                       data=results.to_csv(index=False).encode("utf-8"),
                       file_name="employee_risk_predictions.csv", mime="text/csv",
                       use_container_width=True)

    st.caption(f"High label threshold used: **{thr:.1f} hours**. Season filter: {', '.join(seasons) or 'None'}")
